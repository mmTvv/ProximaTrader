import ta
import telebot
from datetime import datetime
from time import sleep
from analitic import Strategy  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é

from config import *

class Utils(object):
    def __init__(self, bot):
        self.tg = telebot.TeleBot(telegram)
        self.bot = bot
        self.strategy = Strategy(bot)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é

        self.start = []
        self.pos = 0
        self.closed = 0
        self.poss = []
        self.pnl = 0
        self.summary_pnl = 0
        self.stat_pnl = []
    
    def send(self, text):
        self.tg.send_message(channel_id, text)

    def stats(self):
        while True:
            sleep(60)
            self.stat_pnl.append(self.pnl)
            self.pnl = 0

    def watcher(self, symbol, side, start_price):
        time = datetime.now().timetuple()
        self.pos += 1
        
        while True:
            sleep(30)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É (—á–∞—Å–æ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º)
            data = self.bot.klines(symbol, timeframe=60, limit=28)
            rsi = ta.momentum.RSIIndicator(close=data['Close'], window=14).rsi()
            chandelier_exit = self.strategy.chandelier_exit(data)

            current_price = data['Close'].iloc[-1]
            pnl = round((current_price / (start_price / 100)) - 100, 2) * 10

            print(f'{symbol} {current_price} {pnl}')
            
            # –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è long-–ø–æ–∑–∏—Ü–∏–π)
            if side == 'buy':
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É, –µ—Å–ª–∏ RSI –ø–∞–¥–∞–µ—Ç –Ω–∏–∂–µ 70 –∏–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ Chandelier Exit
                if rsi.iloc[-1] < 70 or current_price < chandelier_exit.iloc[-1]:
                    if pnl > 0:
                        icon = '‚úîÔ∏è'
                    else:
                        icon = 'üö´'

                    self.closed += 1
                    self.summary_pnl += round(pnl, 2)
                    self.pnl = self.summary_pnl / self.closed
                    self.poss.remove(symbol)
                    
                    self.send(
                        icon + ' –°–¥–µ–ª–∫–∞ BUY #' + symbol + ' –∑–∞–∫—Ä—ã—Ç–∞. \n' +
                        '–í—Ä–µ–º—è –û—Ç–∫—Ä—ã—Ç–∏—è: ' + str(time[2]) + '.' + str(time[1]) + ' ' + str(time[3]) + ':' + str(time[4]) + '\n' +
                        'P&L x10: ' + str(pnl) + '%\n' +
                        'OPEN: ' + str(start_price) + '\n' +
                        'CLOSE: ' + str(current_price) + '\n' +
                        'Total PNL: ' + str(self.pnl) + '\n' +
                        'orders: ' + str(self.closed) + '/' + str(self.pos)
                    )
                    break

            # –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è short-–ø–æ–∑–∏—Ü–∏–π)
            elif side == 'sell':
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É, –µ—Å–ª–∏ RSI –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã—à–µ 30 –∏–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ Chandelier Exit
                if rsi.iloc[-1] > 30 or current_price > chandelier_exit.iloc[-1]:
                    if -pnl > 0:
                        icon = '‚úîÔ∏è'
                    else:
                        icon = 'üö´'

                    self.closed += 1
                    self.summary_pnl += round(-pnl, 2)
                    self.pnl = self.summary_pnl / self.closed
                    self.poss.remove(symbol)
                    
                    self.send(
                        icon + ' –°–¥–µ–ª–∫–∞ SELL #' + symbol + ' –∑–∞–∫—Ä—ã—Ç–∞. \n' +
                        '–í—Ä–µ–º—è –û—Ç–∫—Ä—ã—Ç–∏—è: ' + str(time[2]) + '.' + str(time[1]) + ' ' + str(time[3]) + ':' + str(time[4]) + '\n' +
                        'P&L x10: ' + str(-pnl) + '%\n' +
                        'OPEN: ' + str(start_price) + '\n' +
                        'CLOSE: ' + str(current_price) + '\n' +
                        'Total PNL: ' + str(self.pnl) + '\n' +
                        'orders: ' + str(self.closed) + '/' + str(self.pos)
                    )
                    break
